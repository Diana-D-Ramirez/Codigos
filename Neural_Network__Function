import numpy as np
import pandas as pd
import re


#This code estimates the Methane Yield of a specific dataset from an Anaerobic Digestion model
#The dataset must contain five variables distributed in columns;
#Lipids, Protein, Lignin, Total Solids and Volatile Solids in that order without header
#If you use this model, please cite: 
#D. Dominguillo, J. Aburto, H. León-Santiesteban, and E. Martínez-Hernández, “Neural network model for biomethane yield estimation from biomass composition (total solids, volatile solids, lipids, protein, and lignin),”2022.


x1 = pd.read_csv("DataSet.csv",header=None)
x1 = x1.to_numpy()
x1 = np.transpose(x1)

#====================================================================================================
#
# Weights and biases (w and b) are the learnable parameters of the neural network
#
#                     OUTPUT =  Σ ( weight * input ) + bias
#
#====================================================================================================

 
# Input 1
In_xoffset =  np.array([[0.0],
                       [1.7],
                       [0.1],
                       [3.7],
                       [39.49]])

In_gain = np.array([[0.0232531101034763],
                    [0.0681895669962496],
                    [0.0714285714285714],
                    [0.0221483942414175],
                    [0.0340078217990138]])

In_ymin = np.array([-1])


#LAYER 1
b1 = np.array([[-1.4709793373073447587],
               [-0.19283971755181464336],
               [-1.1896805700089529978],
               [-0.42243148098987171046],
               [0.032539661854926557605],
               [-1.0711989733684872395],
               [1.8243336216907883873],
               [0.7209624008379662552],
               [-0.02453499737336658354],
               [-0.60514704422387533],
               [0.38494651652832567734],
               [1.1003654052778699679]])


W1 = np.array([[-0.48786957915503764704,-1.7632270278342647707,0.59367353300065184296,0.46593205721182062717,0.19534047466296805551],
               [-1.1441090512378380151,1.1311295338104303543,0.83214121206697277966,-0.8970107266685628522,-0.051838678661578083129],
               [-0.55611296459617154397,1.2563527845909607805,1.1900483733851225931,-0.38691599284360589373,-0.56035884562834281652],
               [-0.46820391526328170029,1.7062058212988264749,-0.52285022730219310461,1.828736632789567107,0.30472994977923090199],
               [-0.64139808548123244947,0.20655618710391443482,-1.1732134024021403373,1.5713107686798051255,0.50142060589034176399],
               [-1.6439168544311413278,-0.55169851316462503732,-0.11282461029365421779,-0.56392849458652349881,-0.099018110077937426805],
               [0.62694107974038504327,1.5154800738244775804,1.2137824438638877833,-0.43445965216169785128,-0.35085435927992875138],
               [-0.17136643782933203006,1.1705880622749189612,-0.046836109879088781704,-0.16887030101790120873,-1.3308852384377001243],
               [-0.28567870256081895342,1.3792821720041421596,-1.0645516605626801354,0.97902440001517343493,0.69977624692456441569],
               [0.43980111477066280434,0.88331724598875571708,-1.0224600417734956981,-0.54352949081798107578,0.93932941344021669838],
               [-0.90231020133258721394,-2.8184665500454295639,1.3007880976326364753,0.71183362013081608044,0.27268231155546773792],
               [0.60787440864860753376,1.6230829799957939841,-0.034972362624592356894,1.0713838037183478491,-0.23958722308379207244]])


# Layer 2
b2 =  np.array([-0.11381450694871303453])
W2 = np.array ([1.9580896175675270854,1.5424076224653222589,-1.8755469931285710938,-1.3828742952076349404,-1.3497557083373183939,-1.6711139672499166764,-1.8111522061593401389,1.4089592816517721996,1.1867163828544518012,1.2777159050768009951,0.908908168619153356,1.5104675794090509644])


# Output 1
Out_ymin = np.array([-1])
Out_gain =  np.array([4.0650406504065])
Out_xoffset =  np.array([0.049])


#======================SIMULATION AND FUNCTIONS===============================================

# Dimensions
Q = x1.shape[1] # samples
print("Data Number = ",Q)

# Input 1
y = x1[...,:] - In_xoffset[...,:]
y = np.multiply(y,In_gain[...,:])
y = y + In_ymin[...,:]


# Layer 1    #b1 expand Q times and its sumed by the product of W1 and y
a1=np.repeat(b1,Q,1) + np.dot(W1,y)

 
#Sigmoid Symmetric Transfer Function
def tanh_function(a1):
    a = (2/(1 + np.exp(-2*a1))) -1
    return a

a1=tanh_function(a1)
    
#Layer 2    #b2 expand Q times and its sumed by the product of W2 and transfer function resutl
a2=np.repeat(b2,Q) + np.dot(W2,a1)


 #Output 1
x0 = a2-Out_ymin[...,:]
x0 = x0 / Out_gain[...,:]
x0 = x0 + Out_xoffset[...,:]
#where x0 is the estimated value

#===============================================================================
#   Adding x0 to a list   #

lst = []

for x in x0:
    lst.append(x)
  
    
lst=re.sub(",","",str(lst))
lst=re.sub(" ","\n",lst)
lst = str(lst)[1:-1] 
   
print("\nEstimated Methane Yield =\n\n",lst)

#===============================================================================
####                Saving in a CSV                 ######


with open("RESULTS.csv","w") as file:
    file.write(lst + "\n")

